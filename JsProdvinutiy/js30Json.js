'use strict';

// Современный стандарт передачи данных Json и Асинхронные действия на страницы. Те, что выполняются без перезагрузки страницы

// Json - javascript object Notation и является текстовым форматом обмена данных
// Исп почти везде сейчас. json - это набор пар ключ-значение и главным правилом будет то, что все строки обязательно должны быть в двойных кавычках
// В качестве значенией может быть много что, объекты, цифры, буквы, лог значения, даже Null

// let options = {
//     width: 1366,
//     hight: 768,
//     background: 'red',
//     font: {  //будет еще настройка шрифта, отрыли объект в объекте 
//         size: '16px',
//         color: '#fff'
//     }
// };
// // Этот объект мы хоти отправить на сервер, нам нужно его преобразовать в json формат. Тк, никакие данные в обычном формате серве просто не воспримет.

// console.log(JSON.stringify(options)); // чтобы преобразовать бере встроенны объект json и его метод stringify
// // Теперь там одна строка, ключ-значение и ДВойные кавычки!


// // А теперь обратная операция - parse 
// console.log(JSON.parse(JSON.stringify(options))); // это обратная операция - только parse. чтобы пример был

// !!!!!!!!!!!!!!!!!!!!!!!!!!!

// Клиентская часть - то что видит пользователь!
// Серверная часть - то что пользователь никогда не увидит (там лежат данные, они там обрабатываются и тд)

// Браузер всегда получает или отправляет данные с сервера с перезагрузкой страницы 
// Сейчас например в инернет магазинах страницы уже полностью не перезагружаются как раньше при введении фильтра. 
// Все это реализованно с помощью технологии Ajax - Айжакс.
// плюсы - экономия трафика, времени и просто красиво, тк не нужно полностью обновлять всю страницу
// минусы - должен быть включен у пользователя javascript , и с плохим инетом - могут быть баги
// Ajax - Asynchronous Javascript and XML.
// Для того, чтобы иметь возможность из ЖС делать http запросы к серверу без перезагрузки  страницы, нам понадобится встроенный объект XML http request

// Сейчас будет пример и мы будем имитировать Сервер создав JSON файл

let inputRub = document.getElementById('rub'),
    inputUsd = document.getElementById('usd');

inputRub.addEventListener('input', () => {
    let request = new XMLHttpRequest(); // XMLhttpRequset - главынй объект для работы с реали запросами и у него есть свои методы свойства и события. requst - перевод - запрос. А далее используют конструктор. Далее используют большой объект XML..
    // методы
    // request.open(method, url, async, login, pass);
    request.oper('GET', 'current.json'); // здесь мы сделали запрос на сервер, чтобы получить доступ к файлу json
    request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    request.send(body);
    
});  // мы сейчас настраиваем наш запрос на получение json данных 
