'use strict';

// Конструкции по ошибкам , в консоле часто есть ошибки на крупных сайтах, но ошибки, могут положить весь скрипт
// и нам нужно их обрабатывать
// try и catch это 2 обязательных блока 

try {
    console.log('Начинаем работу'); // Сначала выполняется блок кода try а уже потом, если тут есть ошибка, то тогда catch, но только если есть
    console.log(a);
    console.log('а хер выполнит');
} catch (errorrrr) {  // У блока catch есть специальный объект ошибки, он передается как аргумент в этот блок и может подробно рассказать о проблеме. Как только нашлась ошибка, выполнение прерывается !!  и уходит в catch
    console.log(errorrrr.name); // выполнится, если есть ошибка. Мы сюда закинули аргумент с объектом по ошибке и он написал подробно, где ошибка, но он не выделил это все ошибкой красной браузера
    console.log(errorrrr.message);
    console.log(errorrrr.stack);

    console.log("Мы получили ошибку: " + errorrrr.name); //Вспомни метод интерполяции - когда мы в кавычка вставляли переменные, не закрывая кавычки
};

console.log('Код работает дальше'); // Код работает дальше !
console.log('1111111111111111111111111');

//  В целом ошибка имеет 3 основных свойства 1) erorr (там можно дать любое название) error.name
//  У нас ошибка ReferenceErorr , но есть также SintacsisError и тд
//  2) error.message 
// 3) error.satack - набор вызовов, которые привели к данной ошибке в какой строчке 

// Данные с сервера могут не прийти, что то может лагануть и тд, соответвенно, этот метод может быть полезен

let json = '{"id":2}';

try {
    let user = JSON.parse(json); // А если пришло то, что нам не интересует
    console.log(user)

    if(!user.name) {  //нам необходимо имя нашего пользователя. Такое условие самый простой способ проверить на наличие чего либо
        throw new Er("В этих данных нет имени")  //Мы можем создавать свои собственные ошибки и выкидывать их в catch 
    }
} catch (er) {
    console.log(er)
} finally {  // Это необязательная часть, но она выполнится всегда, если нужно
    console.log ('я Выполнюсь всегда')
}