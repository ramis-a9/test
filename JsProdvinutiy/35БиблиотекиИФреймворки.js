// Библиотеки и фреймворки - если поросто, это готовые решения, когда за меня уже написали большую часть кода
// 1ая Библиотека - jquery 
    // Его можно подключить локально или через облако, я пойду через облако, просто вставить пусть в файл
    // он подключается через файл html также перед скриптом основным вставляем script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    $('#btn');  // это нам заменило бы document.getElementById('btn')
    // Мы можем получать элменты при помощи одного значка доллара и селектора элемента
    // Как работает, она берет все элементы, которые подходят под оперделенный селектор Допустим Класс (точка), они их перебирает и выполняет с ними какие то действия - то есть аналогична циклу или методу forEach

// https://jquery.page2page.ru/   - сбоку наверху слева есть карта функий, можно посмотреть все, что умеет

$(document).ready(function() {  //Заменили document.DOMContentLoaded
   
   
    // Сейчас мы хотим, чтобы при наведение на первую кнопку у нас добавлялся класс Avtive, а при уходе мышки - убирался
    $('.List-item:first').hover(function() { //При помощи доллара мы можем получить все элементы у которых есть Класс (точкой) list-item, если я хочу получить ток 1ый элемент то :first. Далее просто ставлю событие наведения - .hover()
        $(this).toggleClass('active') // А сейчас у нас действует событие наведения мышки добавлялся класс (тоглился)
        console.log('Класс на элемент 1 добавился');
    });

    // Теперь я хочу взять 2ой элемент 
    $('.List-item:eq(2)').on('click', function() { // фильтр :eq(и цифра элемента) позволит нам получить нужный элементы (тут ой).  А .on - мы поставили addEventListener
        // Сейчас хотим взять четную картинку и включить анимацию исчезновения, которая у нас уже есть в jquery
        $('.image:even').fadeToggle('slow');  //Здесь ищем КЛАСС (точка), а потом ставим нечетный элемент :even. Далее мы прописываем анмиации, но тк fadeToggle - это метод (), он принимает еще и параметры. Например на сколько быстро выполняетсяя - slow или цифры
    });

    // Теперь я хочу получить последнюю кнопку  и настроить анимацию специальную (ее можно полностью настроить!)
    $('.List-item:eq(4)').on('click', function() {
        $('.image:odd').animate(  // :odd - четная картинка (объекта). Cтавим анимацию и в круглы скобках ставим. Анимейт идет объектом!
        {
            opacity: 'toggle',   //Сейчас мы хотим, чтобы при первом клике наша картинка исчезала , а при втором опять появлялась
            height: 'toggle',
        }, 3000  // а тут пишется время сразу после объекта
        )
    });

     // Использоваться чистый JS можно для того, чтобы решить какую то небольшую задачу и не смысла подключать большу библиотеку нет, тк это нагрузит сайт и пользователя и снизит скорость работы. Даже многие на нативный js сейчас переходят

    //  document.querySelectorAll('.List-item').forEach(function(){}) по факту, доллар просто перебирает, но у нас есть метод foreach
    // .classList - мы можем использовать 
    // .on - тот же adddEventListener, ранее его не было, но теперь есть
    // В Jquery есть такое свойство как $.ajax - было удобно настраивать запросы, но сейчас в нативном методе есть метод fetch 
    // в Jquery есть функция animate, но сейчас уже появился CSS3 стандарт, но даже в нативном уже добавили Element.animate можно почитать документацию
    // Но сейчас 70-80 процентов продуктов написаны именно на Jquery, так что основы нужны


    // SPA - single page application - одностраничное приложение. По своей сути это программа как редактор кода, но работ в браузере. Например гугл почта,как приложение работает, не перезагружаясь переходя по почте, без перезагрузки страницы. Мы уже делали SPA

    //  Angular - js фреймворк основанный на typeScript. 
        // Фреймворк - большое готовое и цельное решение. 
        // Библиотека- набор отдельных элементов, которые мы можем исп и собирать в целое, в этом разница
        // typeScript - это отдельный язык программирования, который после обработки - компиляции Angular - превращается в наш JS. Angualar - работает на другом языка похожем на js , но если мы будем писать на JS , ошибке не будет там
        // Angular - самый тежелый из троицы. Разработал сам Гугл, но уступает React
            // Чтобы работать с ними нужно - 1) Устновонить node.Js и научиться работать с npm пакетами 
            // 2) Ознакомиться с TypeScrypt - что умеет делать и тд 
            // 3) Ко всем относится фреймам - сборщик модулей - WebPack
            // 4) Выучить Шаблон проектирования MVC - это разделение логики приложения на Визуальную часть - Vue, контролирующую чать - Control, и выполняющую какое то действие Modul. MVC - model vue controler 
            // 5) Angular  
        
    // React - как и Vue является библиотекой, а это значит, можно собрать наш проект по частям
        // Разработчик - фейсбук
        // 1) Установить Node.js и npm пакеты - ознакомиться со вторым
        // 2) Babel  - софт переписывающий софт написанный на ES6 стандарте в ES5
        // 3) Препроцессор JSX и как его использовать
        // 4) Сам React - он в целом как бы комбинирует JS и HTML
    
    // Vue - 3ий в наших инструментах. Он является самым легким и чистым , код легко читаемый и легкий в обучениях 
        // 1) Node Js и Npm пакеты
        // 2) Babel
        // 3) Сборщик - например WebPack
    
    // Выбора - Англуяр выбор для тех, кто хочет брать инструмент и проект большой и просто работать легко, а проект будет все больше и больше
        // Если гибкость и чистый JS + смешиваться с html то это React
        //  Если легкий код, поддержка новичка на рынке то это Vue 


}); //domContentLoaded