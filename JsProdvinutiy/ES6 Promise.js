
// promis не поддерживаются в опере мини и интернет эксплорере, даже последнем.
// чтобы работало, нам нужна такая вещь как Polifill их можно найти в бибилотеке (сайте) Babel. В разделе dox будет все. В своей работе, он будет сам превращать код для всех браузеров

// promise - это обещание. (дословно). Мы им говорим, что если произашло что то , то мы обязательно выполним оперделенное действие. Например, когда выполнился клик, у нас что то происходит - например колл бек функция

// btn.addEventListener('click', function() {
//     alert('Что то произашло'); // но часто можно встретиь много действией идущих 1 за другим. Можно сделать много функций обратного вызова, но тогда это будет большой не читаемый код
// });

// let func1 = function(param, func2) {
//     func2(function(param, func3) {
//         func3(function(param, func4) {
//             func4(function(param, func5){
//                 // и тд. В больших проектах это превратится в херь, поэтому были созданы promise 
//             })
//         })
//     })
// };

//  ПРИМЕР - Мы запустили стрелу, и мы получили обещание, что когда она прилетти, мы получим результат опредленный. При создание обещания, оно находится в состоянии ожидания - Panding.  Пока стрела летит мы находимся в ожидании. А потом получаем - если попала - result, если нет - redjected

let drink = 1;

function shoot (arrow, headshot, fail) {  // 3 аргумента, первое типа чем стреляли, второе - поподание, 3 - промах
    console.log('Вы сделали выстрел...');
    setTimeout(function() { // Установим таймаут, типа стрела летит 3 сек. 
        //  Сейчас случайным образом получим велечину и уже будем отталкиваться, попали или нет
            Math.random() > .5 ? headshot({}) : fail('Вы промахнулись'); // Тут я пишу, если наш рандом выдаст более 50 процентов то мы возовим функцию попадания. Внутрь передадим пустой объект - нам сейчас это неважно. В противном случае вызовем функцию fail
    }, 3000) // Тут указали задержку в 3 секунды.
};

function win() {
    console.log("Вы победили");
    (drink == 1) ? byBeer() : giveMoney();   // тут мы сейчас воспользовались тернарным оператором. Если равна 1, то вызываем одну функцию, если нет, то вторую
};

function byBeer() {
    console.log('Вам купили пиво');
};

function giveMoney() {
    console.log("Вам дали деньги");
}

function loose () {
    console.log("Вы проиграли");
};

shoot({}, // вызываем нашу функцию, первым аргументом передадим пустой объект вместо arrow. 
         function(mark) { //это второй аргумент headshot функцией. И передадим ему аругмент - очки типа сколько очков мы выбили
            console.log(" ВЫ попали в цель");
            win(mark, byBeer, giveMoney); // Сейчас у нас цепочка, если произайдет одно события, то произайдет и другое
         },
        function(miss) { //тут уже функция - аргумент fail 
            console.error('Вы промахнулись'); // заметь - команда erorr 
            loose(); // здесь мы просто вставляем функции, которые говорят наш статус
        }

    ); 







