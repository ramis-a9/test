'use strict';

// 1)  На мобильных устройсвах нет кликов, выводов мыши за пределы объекта и т.д.
    // там есть только Табы. Есть сайт Caniuse - там мы вбиваем целевое действие - 
    // touch, и он показывает какие браузеры поддерживают Тач на мобильных устройствах.

    // В консоле разработчки в браузере есть кнопка - Toggle device Tool Bar - слева от слова консоль
    // Мы ее нажимаеим и переходим в " Меню Адаптивности!". Наверху есть выбор - Mobile, Desktop и тд. Там выберем Мобайл и у нас появится Таб мышкой.

/* 2) События на мобильных устройствах. Все Мобильные события начинаются со слова touch
        touchstart - срабаывает при возникновении касания к элементу. По сути аналог клика
        touchmove - когда прикоснулся к элементу и перемещает палец в другую точку. 
        touchend - когда палец перестает касаться сенсора.
            Все эти 3 события мы исп. когда листаем ленту в вк.
        Событие click - также будет нормально срабатывать на мобильных устройствах. Следим за конфликтами
        tochenter - когда наш палец заходит на элемент. Пример - двигаем зажатый палец по сенсеру и палец зашел на элемент на странице. 
        tochleave - когда палец покинул пределы элемента.
        tochcancel - когда палец больше не регистрируется на поверхности. Пример - Открыт браузер на половину, но палец выходит за пределы браузера, палец в браузере больше не регистрируется.
        */

window.addEventListener('DOMContentLoaded', function() {  // Важен регистр в название события! Без него не работает! Нужен, чтобы была загрузка быстрее, чем загрузка страницы- хз что это.
    let box = document.getElementById('btn');
    console.log(box);

    box.addEventListener('touchstart', function(e) {
        e.preventDefault(); // Еще эта комада, отменяет события - например переход по ссылке. Пишем, чтобы избавиться от негативного стандартного поведения браузера
        console.log("Red Box: touchstart"); //Событие отображается и работает
        // console.log(e.touches); // Эта команда - Когда мы исп touches - мы все пальцы, которые прикоснулись к сенсорной поверхности, не зависимо от того, на какой объект они были использованы.
        // console.log(e.changedTouches); //Эта команда почти аналогична первой. Она регистриует все пацльы, которыее были во взаимодействии. 
        // console.log(e.targetTouches); // А в этой команде, мы регистрируем только те пальцы, которые взаимодействуют с опр элементом. 
        // // Здесь во всех трех - lenght = 1, тк. один палец, но если мультитач - то будет равна кол ву пальцев.
        // console.log(e.target); // Команда выведет объект - цель
        // console.log(e.touches[0].target);  // Это свойство моб событий - первый пален [0]
    });

    box.addEventListener('touchmove', function(e) {
        e.preventDefault();
        console.log('Red Box: ' + e.touches[0].pageX); //здесь мы взяли наш первый палец и будем получать координату по оси Х 
    });

    box.addEventListener('touchend', function(e) {
        e.preventDefault();
        console.log("Red Box: touchend");
    });
});

// 3) Таким образом мы можем комбинировать события и создавать новые, которых не сущствует.
     // Свайп - это пример этому. Когда мы быстро пролистываем. 
     //  При комбинировании touchstart, touchmove и touchend мы можем это реализовать.


/* 4) Регулярные выражения - служат для того, чтобы удобно работать со строками.
        удалять, заменять части слов, ограничивать ввод опр знаков и т.д. 
        Они всегда состаят из 2ух частей - 1) Паттерн  2) Флаги   */
         /* pattern - это то что мы хотим найти, числа, буквы, слова, кавычки, пробелы и т.д.
       flags - вспомогательные символы */
    
    let box = document.getElementById('btn');

    // new RegExp('pattern','flags');  // 1ый вариант написания
    // /pattern/flags  //2ой вариант написания
    
    // let ans = prompt("Введите Ваше имя");

    // let reg = /n/; //Регулярное выражение - это технология, которая позволяет работать со строками
    // console.log(ans.search(reg)); //Тут мы говорим, что внутри строки с промпта, мы будем искать наше регулярное выражение, на данный момент буква n 
    //выведет 1 -  мы ввели anna, метод нашел маленькую букву n на позиции 1. Если вообще не будет, то -1 будет.
    // это был паттерн, но если нам нужно искать независимо от регистра и тд, у нас есть Флаги
    
    // всего у нас есть 3 флага 
        // 1) i - флаг регистра, говорит, что мы хотим найти что то, независимо от регистра
        // 2) g - флаг глобальности, что мы ищем глобально, не только первое вхождение, но и все остальные вхождения
        // 3) m - флаг многострочности

    // пример с флагом по Анне  let reg = /n/i -здесь вписаль флаг
    // let reg = /n/i;
    // console.log(ans.search(reg)); //тут мы получи 1, если напишем даже ANNA. т.к есть файл.
    
    // let reg = /n/gi;
    //метод serch слаб, он ищет только первое совпадение в строках по регулярному выражению
    // console.log(ans.match(reg)); //Метод match переводится как совпадение. 
    //если мы его исп без флага глобальности, то у нас тут будет только 1ое совпадение, в виде массива.
    //а если с флагом глобальности g , то массив со всеми совпадениями получаю
    //Если хотим исп сразу несколько флагов, то пишем let reg = /n/gi; просто приписываем

    // let pass = prompt('Введите пароль');

    // console.log(pass.replace(/./g, "*")); // Это метод реплейс (замена), например, мы хотим скрыть пароль введенный. Точка - это особбый символ в регулярных выражениях, это значит, что сейчас мы будем искать или заменять любые символы, которые попадут на нашу строку.
    // ставим точку, флаг глобальности, потом ставим "запятую" и на что именно меняем в кавычках.
    // alert('12-34-56'.replace(/-/g, ':')); //здесь в replace пишу в скобках, что именно хочу поменять, ставлю флаг глобальности, чтобы все эти знаки в строке менялись и на что именно.

    // У самих регулярных выражений есть свои методы. Метод test, который проверяет, если ли вообще такое совпадение и дает true или false 
    // let ans = prompt("Введите Ваше имя");
    
    // let reg = /n/gi;
    // console.log(reg.test(ans)); //  тут мы вписываем рег выражение и его метод, а во внутрь строку, которую нужно протестировать 
    // даст true , если найдет n



/* 5) Классы символов - пример я хочу сказать - найди мне с помощью регулярного выражения цифру одну 
        или все исп флаг глобальности.  */
        // \d  - дигидс - числа (предложение сверху)
        // \D - ищем НЕ число
        // \w - если хочу искать все буквы то words
        // \W - ищем не букву 
        // \s - ищу пробелы spaces 
        // \S - ищем не пробел
        //   \ - он называется экранирующий слэш
    
    // let ans = prompt("Введите Ваше число");
    
    // let reg = /\d/g; //здесь я прошу найти все числа, через рег выражение.
    // console.log(ans.match(reg)); //тут я получу массив со всеми найденными цифрами
    // во внутрь match мы должны поместить регулярное выражение 

    let str = 'My name is / R2D2';
    console.log(str.match(/\w\d\w\d/i)); //здесь я пишу в рег выражении, чтобы они нашел сначала букву, потом цифру, потом опять букву и цифру, а далее ставлю флаг, чтобы искал вне регистра.
    //он нашел именно эту комбинацию и вы вел R2D2 , а не весь My name is R2D2
    console.log(str.match(/\//i)); //здесь я искал этот экранирующий слэш  - / в тексте
    console.log(str.match(/ /)); // пробел это тоже символ, но его не нужно экранировать, тут мы его нашли
    


    