'use strict';

// ЭТО СТАНДАРТ ES5 
function User(name, id) { // функция относится к объектам и в нее можно записать и методы и свойства
    this.name = name;    // Сейчас мы пытаемся дать имена и идентификаторы разным пользователем, которые зашли на сайт
    this.id = id;   // Наша функция стала конструктором, и мы можем создавать новых пользователей.
    this.humen = true;
    this.hello = function() {
        console.log('Hello! ' + this.name);
    };
};

User.prototype.exit = function(name) { //exit просто название, можно любое поставить. Мы здесь сделали prototype, а после просто создали новую функцию, которая будет привязываться к имени.
    console.log('Пользователь ' + this.name + " ушел");
};


// Функцию, как и многое другое, можно создать через оператор new
// Оператор (операторная функция) new создаёт экземпляр объекта, встроенного или определённого пользователем, имеющего конструктор.
let ivan = new User('Ivan', 25),  // в этих переменных, которые мы создали, лежат объекты, а не функции.
    alex = new User('Alex', 20); // Когда мы вызвали функцию и передали ей вот эти данные в переменных, она стала функцие конструктором

console.log(ivan);
console.log(alex);

ivan.exit();
// При помощи функции User , мы создали 2 новых объекта, именно поэтому, такие функции называются функциями конструкторами.
// return в таких функциях не нужно указывать

// Кроме свойств, мы можем также прописывать и методы в таких конструкциях

// везде где есть шаблонизация, мы можем использовать конструкторы.

