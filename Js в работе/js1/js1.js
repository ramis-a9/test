'use strict';

//  Управление временем выполнения скриптов и Делегирование событий

// setTimeout(sayhello, 3000);  //Позволит запустить что то через какое то время. Первый аргумент - Функция, второй аргумент - задержка в милисекундах. А третий аргументы через запятую, укажется аргумент, который мы хотим использовать в нашей функции.

// let timerId = setTimeout(sayhello, 3000); // Здесь я поместил таймер в опр коробку. Так мы запишем число идентификатор. 
// clearTimeout(timerId);  // Благодаря коробки, здесь у нас больше ничего не произайдет и скрипт не сработает. Он останавливает setTimeout

// let timerId = setInterval(sayhello, 30000); //Здесь функция будет повторяться каждые 3сек.
// // clearTimeout(timerId);

// function sayhello() {
//     console.log('Hello World'); 
// };


/* Чем рекурсинвый setTimout лучше, чем setInterval ? 
Рекурсивный - когда функция вызывает саму себя. Например, функции для работы нужно
5 секунд для обращение на сервер и т.д. А мы ставим интервал 3 сек, в итоге, мы постоянно заного вызывает функцию
*/

// let timerId = setTimeout(function log () {
//     console.log('Hello');
//     setTimeout(log, 10000);  // Здесь мы сделаем некую рекурсию, функция будет вызывать саму себя 
// }); // Рекурсивный метод будет надежнее, если мы не уверены в setInterval, вдруг там есть задержка, а здесь, мы эту задержку будем учитываьть

let btn = document.querySelector('.btn'),
    elem = document.querySelector('.box');


function myAnimation() {
    let pos = 0;  // На данный момент параметры TOP и Left = 0, если они будут изменяться пропорционально, то, квадрат будет смещаться вниз по диагонали.

    let id = setInterval(frame, 10); //Изначально позиция равна 0. После этого, кадлые 10 милисек, мы запускаем функцию frame.
    function frame () { //Эту функцию мы будем запускать каждый раз исп. setInterval
            if (pos == 300) {    //Если достигнет 300 пикселей
                clearInterval(id); //здесь мы вписали id, чтобы таймер остановился 
            } else {
                pos++;
                elem.style.top = pos + 'px'; //здесь я так понял ставил наш элемент на по координатам.
                elem.style.left = pos + 'px';
            }
    }
};

btn.addEventListener('click', myAnimation);