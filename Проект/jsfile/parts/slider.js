function slider () {
    // Рекализаций слайдеров можно найти множество , но нужно чтобы он автоматичеси подстраивался под адаптацию например мобилки и тд. Если исп конкретные пиксели, размеры и тд, то он не совсем универсален, тк он подходит только под что то конкретное одно
    // сейчас сделаем адаптивый слайдер на js без css, но потом нужно будет ими пользоваться 

    let slideIndex = 1, // Это переменная, отвечает за тот слайд, который показывается в текущий момент 
        slides = document.querySelectorAll(".slider-item"), // сами картинки
        prev = document.querySelector('.prev'),  // стрелочка налево
        next = document.querySelector('.next'), // стрелочка направо 
        dotsWrap = document.querySelector('.slider-dots'), // обертка наших точек 
        dots = document.querySelectorAll('.dot'); // сами точки

    // Нам нужны функции 1) Скраыть не нужные картинки, но так, чтобы она содержала аргумент с номером слайда, который надо попказать 
    // 2) При клике на стрелочки, нужно чтобы слайд индекс изменялся и показывался определенный слайд
    // 3) Функция для опр текущего слайда, чтобы показывался нужны слайд на точках
    
    // т.к у нас ФАНКШИН Декларейшен, мы можем вызвать функцию до того, как она была объявлена
    showSlides(slideIndex);
    
    function showSlides(n) { // Именно эта функция будет показывать тот слайд, который мы ей передаем  (аргумент)
                                    // Также должны изменяться и точки в соответветсвии со слайдом , как и реакция на тыкания стрелочек. А когда мы тыкаем на 3ий кружочек, мы должны понять, какой там слайд и именно его поаказть
        // Кроме того сечас сделаем так, чтобы когда мы тыкали на стрелочки в крайних положения, они переключались на противоположенные - нажали на 1, а потом назад, вкл 4ая

        if (n > slides.length) { // Тут мы говорим, если слайды закончились, то вернулись к первому 
            slideIndex = 1;

        }
        if (n < 1) {
            slideIndex = slides.length //тут мы сказали, если мы листаем слайдет назад, то возвращаемся к самому последнему слайду
        }
        slides.forEach((item) => item.style.display = 'none')  // (1ый сопособ) Переберем все слайды. Через стрелочную функцию, в скобках передаем ОДИН агрумент. Далее мы сделали так, чтобы все слайды , которые сейчас у нас на страницы скрылись 
        
        // for (let i = 0; i < slides.length; i++) {       //2ой способ, но надо через первый !
        //     slides[i].style.display = 'none'; // Квадратные скобки, тк это массив , мы же работали чере QuerySelectorALL !
        // }
        dots.forEach((item) => item.classList.remove('dot-active')); // Мы здесь удалили класс у кнопок (т.к. класс, точку ставить не нужно) удалили класс на точках, чтобы они были не активны.

                // Теперь мы должны показать нужный слайд 
        slides[slideIndex - 1].style.display = 'block'; // Мы должны конвектировать нормальную нумерацию в JS нумерацию. Первоначалоьно там просто 1 на slidIndex
        dots[slideIndex - 1].classList.add('dot-active');
    }

    function plusSlides(n) {
        showSlides(slideIndex += n) // Увеличиваем тут на знаечение n. Мы специально подставили эту функциЮ, чтобы после имзенения, вызвалась функция, но уже с 2ойкой showslides, а там уже выполнятся остальные команды и все будет верно показываться 
    }

    function currentSlide(n) {
        showSlides(slideIndex = n); // Тут, когда мы кликнем на 4ую строчку, туда передастся событие 4 
    }

    prev.addEventListener('click', function() {
        plusSlides(-1);
    });

    next.addEventListener('click', function() {
        plusSlides(1);
    });

    // мы сейчас исп делегиррование
    dotsWrap.addEventListener('click', function(event) {
        for (let i = 0; i < dots.length + 1; i++) {  // здесь наш ДОТС +1 прописано для (не понял, но это связано с повторением циклаЮ внизу у меня i-1)
            if (event.target.classList.contains('dot') && event.target == dots[i-1]) { // При делегировании событий мы проверяем элемент на опр параметры И только потом что то делаем. Тут мы проверяем, что мы кликнули именно на точку. Contains позволяет проверить что мы попали именно в точку
                currentSlide(i); 
            }
        }
    });
};
modul.exports = slider;