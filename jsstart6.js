"use strict";
//Основые объектоного программирования. Главную роль играет объект, он может в себе содержать методы и свойства, любой вид данных.
// Например - автомобиль - это объект, у него есть свои свойства - двигатель, ходовая и тд..
// Но у их потомков были разные двигатели, объемы, колеса и тд
// То есть у нас есть объект прототип с опр наобором характеристик и изменяю их немного, мы штампуем новые экзмепляры.
// Например - Прототип модельного окна, на основании которого, мы сделаем несколько новых не похожих друг на друга.
// Прототип пользовательского сайта и тд.
// ООП Это наука о том, как делать правильную архитектуру. 

// Отталавливание ошибок - помогает найти ошибку.
// Если мы хотим остановить выполнеине кода в опр. моменте именно по функциям. - Заходим в бразкер, в просмотр кода и вкладка Sourse.
// - есть такое понятие как BreakPoint-ы . (они останавливают).
// - после выставления брэйк поинтов (на цифры жмем), обновляем всю стр. Справа мы можем нажать на кнопки - старта дальше, или перескока на след Брэйкпоинт, и пропустить часть кода и смотреть результат следующией функции.
// - Call Stack - вывод всех функций, которые привели к данном результату.
// - Scope - переменные и данные, которые сейчас используются
// - Breackpoints - это те самые метки, которые мы поставили

console.log('\u041f\u0440\u0438\u0432\u0435\u0442'); // Unicode в шестнадцетеричной система - Буква Л
let л ='Л'.codePointAt(0).toString(16);

//DOM - document object modul - объектная модель документа. HTML код явл документом. И он представлен связанными узлами между собой
// Родительский тег - HTML. Дочерние Теги - Head, у него свои дочерние - meta, title, link
// у тега Body свои дочерние - div, button и тд
// Мы будем использовать весь документ - Dom . Тк это встроенный объект, у него есть методы и свойства.
// На нашей страницы мы можем назначать уникальные идентификаторы - id и по ним находить то, что нам нужно

let box = document.getElementById("box"); // Тут мы исп. встроенный объект document. Т.к. это тип данных объект, у него есть методы и свойства. Мы исп. его метод -
// getElementById, а в скобка пишем сам id, который нам нужен.
// id может быть только один на странице, т.к. он уникальный идентификатор.
console.log(box);
// Можно получить элемент по тегу - но если посмотреть, тэгов очень много. Если запросить по тегу, то мы получим их в виде псевдомассива.
// Псевдомассив- синтаксически теже саимые массивы, но без методов, таких как - pop push reduced и т.д.
 
let btn = document.getElementsByTagName("button"); // тут уже getElementS - несколько элементов и по тегу. И мы получим псевдомассив.
console.log(btn);
console.log(btn[0]);

let circle = document.getElementsByClassName("circle"); //Поиск по классу. Тут опять S - это значит, что мы получим псевдокллекцию.
console.log(circle[2]);

let heart = document.querySelectorAll(".heart"); //здесь мы получаем селектор. Все пользуются этой командой. В скобках мы задаем любой СиСС селектор. К ним относятся и классы и айди и теги и атрибуты. А также вложеность всего перечисленного.
// Внимание, нужно указывать, что это за селектор. Если это класс - то ТОЧКУ, если id то РЕШЕТКУ, атрибут - Квадратые скобки и т.д.
console.log(heart);
console.log(heart[1]); //тут выделим второе сердце
//Доп. преимущества команды этой - Если есть какой то класс .wreaper .heart , а внутри вот класс heart - это указывается так и не будет ошибкой
// Псевдо массив полученный через querySelectorAll имеет 1 метод - это метод ForEach !! Он позволит перебрать и поработать с массивом.

let oneheart = document.querySelector(".heart"); // он очень похож на предыдущий метод, но тут мы получаем только первый элемент на странице.
console.log(oneheart); //ту выделится первое сердце